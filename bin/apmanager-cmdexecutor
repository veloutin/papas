#!/usr/bin/env python
import os, sys
import logging
import logging.handlers

LOG = logging.getLogger("apmanager.bin.cmdexecutor")

CONFIG_DIR = '/etc/papas'
sys.path.append(CONFIG_DIR)
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
import settings

import pyinotify
from pyinotify import WatchManager, Notifier, ProcessEvent
from apmanager.accesspoints.apcommands import CommandExecResult
from apmanager.accesspoints.models import AccessPoint
from apmanager import utils
from threading import Thread

def handle_command_exec(cmd_id):
    LOG.info('Command execution request for: %s', cmd_id)
    try:
        a = CommandExecResult.objects.get(pk=cmd_id)
        a.execute() 
        LOG.debug('Success')
    except Exception, e:
        LOG.error("Command Exec Failed with error: %s", str(e))
    
def handle_ap_refresh(ap_id):
    LOG.info('AccessPoint Refresh request for: %s', ap_id)
    try:
        a = AccessPoint.objects.get(pk=ap_id)
        a.refresh_clients()
        LOG.debug('Success')
    except Exception, e:
        LOG.error("AP Refresh failed with error: %s", str(e))
    
def handle_ap_init(ap_id):
    LOG.info('AccessPoint Init request for: %s', ap_id)
    try:
        a = AccessPoint.objects.get(pk=ap_id)
        a.run_init()
        LOG.debug('Success')
    except Exception, e:
        LOG.error("AP init failed with error: %s", str(e))

def Monitor(path):
    class PCreate(ProcessEvent):
        ACTIONS = (
            (settings.COMMAND_WATCH_DIR, handle_command_exec),
            (settings.AP_REFRESH_WATCH_DIR, handle_ap_refresh),
            (settings.AP_INIT_WATCH_DIR, handle_ap_init),
        )

        def dispatch_process(self, func, event):
            """ Event dispatching function """
            LOG.debug('dispatch_process(%s, %s)', func, event.pathname)

            for action in self.ACTIONS:
                if os.path.samefile(event.path, action[0]):
                    #TODO Pool processes
                    pid = os.fork()
                    if not pid:
                        action[1](event.name)
                        try:
                            os.unlink(event.pathname)
                        except OSError:
                            LOG.warn("Unable to delete {0}".format(event.pathname))
                        sys.exit(0)
                    t = Thread(target=os.waitpid,args=(pid,0))
                    t.start()
                    return

            LOG.debug("Dispatcher :: Unhandled Event")
            return None
        
        def process_IN_CREATE(self, event):
            LOG.debug('IN_CREATE event received : %s', event.pathname)
            self.dispatch_process('IN_CREATE',event)
            return 

        def process_IN_CLOSE(self,event):
            LOG.debug('IN_CLOSE event received : %s', event.pathname)
            self.dispatch_process('IN_CLOSE',event)
            return 

    wm = WatchManager()
    notifier = Notifier(wm, PCreate())
    wm.add_watch(path, pyinotify.IN_CREATE | pyinotify.IN_CLOSE_WRITE , None, True)

    LOG.info("Starting Main Loop")
    try:
        while 1:
            notifier.process_events()
            if notifier.check_events():
                notifier.read_events()
    except KeyboardInterrupt:
        LOG.info("Interrupted, stopping")
        notifier.stop()
        return


if __name__ == '__main__':
    if "--daemon" in sys.argv[1:]:
        utils.daemonize()
        handler = logging.handlers.TimedRotatingFileHandler("/var/log/papas.log", when="D", backupCount=6)
    else:
        handler = logging.StreamHandler()

    handler.setFormatter(logging.Formatter("%(asctime)s %(name)s %(levelname)s %(message)s"))
    if settings.DEBUG:
        logging.root.setLevel(logging.DEBUG)
    elif "-v" in sys.argv[1:] or "--verbose" in sys.argv[1:]:
        logging.root.setLevel(logging.INFO)
    else:
        logging.root.setLevel(logging.ERROR)

    logging.root.addHandler(handler)
            
    LOG.info("using default path: %s", settings.WATCH_DIR)
    LOG.debug("command watch dir: %s", settings.COMMAND_WATCH_DIR)
    LOG.debug("ap watch dir: %s", settings.AP_REFRESH_WATCH_DIR)
    LOG.debug("ap init watch dir: %s", settings.AP_INIT_WATCH_DIR)

    Monitor(settings.WATCH_DIR)
